{"version":3,"sources":["serviceWorker.js","Routes.jsx","index.js"],"names":["Boolean","window","location","hostname","match","App","React","lazy","About","ContactUs","Login","Signup","ProductDetails","BrowseRequirements","RequirementPost","Chat","ChatOne","Activate","RegisteredVendor","Account","EditProfile","ClientRoute","AuthRoute","Requirements","Routes","fallback","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBC6DAC,EAAMC,IAAMC,MAAK,kBAAM,8DACvBC,EAAQF,IAAMC,MAAK,kBAAM,wDACzBE,EAAYH,IAAMC,MAAK,kBAAM,sEAC7BG,EAAQJ,IAAMC,MAAK,kBAAM,sEACzBI,EAASL,IAAMC,MAAK,kBAAM,sEAC1BK,EAAiBN,IAAMC,MAAK,kBAAM,+DAClCM,EAAqBP,IAAMC,MAAK,kBACpC,+DAEIO,EAAkBR,IAAMC,MAAK,kBACjC,wDAEIQ,EAAOT,IAAMC,MAAK,kBAAM,wDACxBS,EAAUV,IAAMC,MAAK,kBAAM,wDAC3BU,EAAWX,IAAMC,MAAK,kBAAM,4EAC5BW,EAAmBZ,IAAMC,MAAK,kBAClC,+DAEIY,EAAUb,IAAMC,MAAK,kBAAM,8DAC3Ba,EAAcd,IAAMC,MAAK,kBAAM,sEAC/Bc,EAAcf,IAAMC,MAAK,kBAAM,kCAC/Be,EAAYhB,IAAMC,MAAK,kBAAM,kCAC7BgB,EAAejB,IAAMC,MAAK,kBAAM,+DAqCvBiB,MAnCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,yCAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWvB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,YAAYC,OAAK,EAACC,UAAWpB,IACzC,kBAAC,IAAD,CAAOkB,KAAK,cAAcC,OAAK,EAACC,UAAWnB,IAC3C,kBAAC,IAAD,CAAOiB,KAAK,SAASC,OAAK,EAACC,UAAWlB,IACtC,kBAAC,IAAD,CAAOgB,KAAK,UAAUC,OAAK,EAACC,UAAWjB,IACvC,kBAACW,EAAD,CAAWI,KAAK,WAAWC,OAAK,EAACC,UAAWT,IAC5C,kBAACG,EAAD,CAAWI,KAAK,gBAAgBC,OAAK,EAACC,UAAWR,IACjD,kBAAC,IAAD,CAAOM,KAAK,oBAAoBC,OAAK,EAACC,UAAWhB,IACjD,kBAACS,EAAD,CACEK,KAAK,oBACLC,OAAK,EACLC,UAAWf,IAEb,kBAACS,EAAD,CAAWI,KAAK,gBAAgBC,OAAK,EAACC,UAAWL,IACjD,kBAAC,IAAD,CACEG,KAAK,sBACLC,OAAK,EACLC,UAAWV,IAEb,kBAACG,EAAD,CAAaK,KAAK,QAAQC,OAAK,EAACC,UAAWd,IAC3C,kBAACQ,EAAD,CAAWI,KAAK,QAAQC,OAAK,EAACC,UAAWb,IACzC,kBAACO,EAAD,CAAWI,KAAK,YAAYC,OAAK,EAACC,UAAWZ,IAC7C,kBAAC,IAAD,CAAOU,KAAK,wBAAwBE,UAAWX,IAC/C,kBAAC,IAAD,CAAOS,KAAK,IAAIE,UAAWvB,QC7HrCwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc6b0b06.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import React from 'react'\r\n// import {BrowserRouter, Switch, Route} from 'react-router-dom'\r\n// import App from './App.jsx'\r\n// import About from './pages/About.jsx'\r\n// import ContactUs from './pages/ContactUs.jsx'\r\n// import Login from './pages/Login.jsx'\r\n// import Signup from './pages/Signup.jsx'\r\n// import ProductDetails from './pages/ProductDetails.jsx'\r\n// import BrowseRequirements from './pages/BrowseRequirements.jsx'\r\n// import RequirementPost from './components/requirementPost/RequirementPost.jsx'\r\n// import Chat from './pages/Chat.jsx'\r\n// import ChatOne from './pages/ChatOne.jsx'\r\n// import Activate from './auth/Activate.jsx';\r\n// import RegisteredVendor from './pages/RegisteredVendor.jsx'\r\n// import Account from './pages/Account.jsx'\r\n// import EditProfile from './pages/EditProfile.jsx'\r\n// import ClientRoute from './auth/ClientRoute.jsx'\r\n// import AuthRoute from './auth/AuthRoute.jsx'\r\n// import Requirements from './pages/Requirements.jsx'\r\n\r\n// function Routes() {\r\n//     return (\r\n//         <BrowserRouter>\r\n//             <Switch>\r\n//                 <Route path=\"/\" exact component={App} />\r\n//                 <Route path=\"/about-us\" exact component={About} />\r\n//                 <Route path=\"/contact-us\" exact component={ContactUs} />\r\n//                 <Route path=\"/login\" exact component={Login} />\r\n//                 <Route path=\"/signup\" exact component={Signup} />\r\n//                 <AuthRoute path=\"/account\" exact component={Account} />\r\n//                 <AuthRoute path=\"/edit-profile\" exact component={EditProfile} />\r\n//                 <Route path=\"/requirements/:id\" exact component={ProductDetails} />\r\n//                 <ClientRoute path=\"/requirement-list\" exact component={BrowseRequirements} />\r\n//                 <AuthRoute path=\"/requirements\" exact component={Requirements} />\r\n//                 <Route path=\"/registered-vendors\" exact component={RegisteredVendor} />\r\n//                 <ClientRoute path=\"/post\" exact component={RequirementPost} />\r\n//                 <AuthRoute path=\"/chat\" exact component={Chat} />\r\n//                 <AuthRoute path=\"/chat/:id\" exact component={ChatOne} />\r\n//                 <Route path=\"/auth/activate/:token\" component={Activate} />\r\n//                 <Route path=\"/\" component={App} />\r\n//             </Switch>\r\n//         </BrowserRouter>\r\n//     )\r\n// }\r\n\r\n// export default Routes\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Suspense } from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n// import App from './App.jsx'\r\n// import About from './pages/About.jsx'\r\n// import ContactUs from './pages/ContactUs.jsx'\r\n// import Login from './pages/Login.jsx'\r\n// import Signup from './pages/Signup.jsx'\r\n// import ProductDetails from './pages/ProductDetails.jsx'\r\n// import BrowseRequirements from './pages/BrowseRequirements.jsx'\r\n// import RequirementPost from './components/requirementPost/RequirementPost.jsx'\r\n// import Chat from './pages/Chat.jsx'\r\n// import ChatOne from './pages/ChatOne.jsx'\r\n// import Activate from './auth/Activate.jsx';\r\n// import RegisteredVendor from './pages/RegisteredVendor.jsx'\r\n// import Account from './pages/Account.jsx'\r\n// import EditProfile from './pages/EditProfile.jsx'\r\n// import ClientRoute from './auth/ClientRoute.jsx'\r\n// import AuthRoute from './auth/AuthRoute.jsx'\r\n// import Requirements from './pages/Requirements.jsx'\r\n\r\nconst App = React.lazy(() => import(\"./App.jsx\"));\r\nconst About = React.lazy(() => import(\"./pages/About.jsx\"));\r\nconst ContactUs = React.lazy(() => import(\"./pages/ContactUs.jsx\"));\r\nconst Login = React.lazy(() => import(\"./pages/Login.jsx\"));\r\nconst Signup = React.lazy(() => import(\"./pages/Signup.jsx\"));\r\nconst ProductDetails = React.lazy(() => import(\"./pages/ProductDetails.jsx\"));\r\nconst BrowseRequirements = React.lazy(() =>\r\n  import(\"./pages/BrowseRequirements.jsx\")\r\n);\r\nconst RequirementPost = React.lazy(() =>\r\n  import(\"./components/requirementPost/RequirementPost.jsx\")\r\n);\r\nconst Chat = React.lazy(() => import(\"./pages/Chat.jsx\"));\r\nconst ChatOne = React.lazy(() => import(\"./pages/ChatOne.jsx\"));\r\nconst Activate = React.lazy(() => import(\"./auth/Activate.jsx\"));\r\nconst RegisteredVendor = React.lazy(() =>\r\n  import(\"./pages/RegisteredVendor.jsx\")\r\n);\r\nconst Account = React.lazy(() => import(\"./pages/Account.jsx\"));\r\nconst EditProfile = React.lazy(() => import(\"./pages/EditProfile.jsx\"));\r\nconst ClientRoute = React.lazy(() => import(\"./auth/ClientRoute.jsx\"));\r\nconst AuthRoute = React.lazy(() => import(\"./auth/AuthRoute.jsx\"));\r\nconst Requirements = React.lazy(() => import(\"./pages/Requirements.jsx\"));\r\n\r\nfunction Routes() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Suspense fallback={<div>Loading</div>}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={App} />\r\n          <Route path=\"/about-us\" exact component={About} />\r\n          <Route path=\"/contact-us\" exact component={ContactUs} />\r\n          <Route path=\"/login\" exact component={Login} />\r\n          <Route path=\"/signup\" exact component={Signup} />\r\n          <AuthRoute path=\"/account\" exact component={Account} />\r\n          <AuthRoute path=\"/edit-profile\" exact component={EditProfile} />\r\n          <Route path=\"/requirements/:id\" exact component={ProductDetails} />\r\n          <ClientRoute\r\n            path=\"/requirement-list\"\r\n            exact\r\n            component={BrowseRequirements}\r\n          />\r\n          <AuthRoute path=\"/requirements\" exact component={Requirements} />\r\n          <Route\r\n            path=\"/registered-vendors\"\r\n            exact\r\n            component={RegisteredVendor}\r\n          />\r\n          <ClientRoute path=\"/post\" exact component={RequirementPost} />\r\n          <AuthRoute path=\"/chat\" exact component={Chat} />\r\n          <AuthRoute path=\"/chat/:id\" exact component={ChatOne} />\r\n          <Route path=\"/auth/activate/:token\" component={Activate} />\r\n          <Route path=\"/\" component={App} />\r\n        </Switch>\r\n      </Suspense>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './Routes.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}